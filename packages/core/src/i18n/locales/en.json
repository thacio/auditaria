{
  "commands": {
    "docs": {
      "description": "open full Gemini CLI documentation in your browser",
      "opening": "Opening documentation in your browser: {url}",
      "sandbox_message": "Please open the following URL in your browser to view the documentation:\n{url}"
    },
    "theme": {
      "description": "change the theme"
    },
    "auth": {
      "description": "change the auth method"
    },
    "editor": {
      "description": "set external editor preference"
    },
    "language": {
      "description": "change language preference"
    },
    "web": {
      "description": "open web interface in browser",
      "help": "Opens the web interface in your browser. Use --web flag when starting auditaria to enable web interface.",
      "error": {
        "not_available": "Web interface is not available in this configuration"
      },
      "start": {
        "description": "start web interface server",
        "pending": "Starting web interface...",
        "error": "Failed to start web interface: {error}"
      },
      "stop": {
        "description": "stop web interface server",
        "error": "Failed to stop web interface: {error}"
      },
      "status": {
        "description": "show web interface status",
        "running": "Web interface is running on port {port} with {clients} connected client(s)",
        "stopped": "Web interface is not running"
      },
      "already_running": "Web interface is already running on port {port}",
      "not_running": "Web interface is not currently running",
      "started": "Web interface started on http://localhost:{port}",
      "stopped": "Web interface stopped",
      "starting_and_opening": "üåê Opening web interface in browser...",
      "available_at": "üåê Web interface available at http://localhost:{port}",
      "opening_browser": "Opening web browser...",
      "browser_open_failed": "Failed to open browser automatically. Please visit http://localhost:{port} manually.",
      "port_fallback": "Port {requestedPort} is in use, using port {assignedPort} instead",
      "messages": {
        "connected": "Connected to Auditaria CLI"
      },
      "errors": {
        "already_running": "Web interface is already running"
      }
    },
    "privacy": {
      "description": "display the privacy notice"
    },
    "settings": {
      "description": "View and edit Gemini CLI settings"
    },
    "stats": {
      "description": "check session stats. Usage: /stats [model|tools]",
      "alt_name": "usage",
      "errors": {
        "session_start_unavailable": "Session start time is unavailable, cannot calculate stats."
      },
      "subcommands": {
        "model": {
          "description": "Show model-specific usage statistics."
        },
        "tools": {
          "description": "Show tool-specific usage statistics."
        }
      }
    },
    "mcp": {
      "description": "list configured MCP servers and tools",
      "manage": {
        "description": "Manage MCP servers",
        "need_command": "You need at least one command before continuing.",
        "add": {
          "description": "Add a server",
          "usage": "Usage: auditaria mcp add [options] <name> <commandOrUrl> [args...]",
          "name_description": "Name of the server",
          "command_url_description": "Command (stdio) or URL (sse, http)",
          "scope_description": "Configuration scope (user or project)",
          "transport_description": "Transport type (stdio, sse, http)",
          "env_description": "Set environment variables (e.g. -e KEY=value)",
          "header_description": "Set HTTP headers for SSE and HTTP transports (e.g. -H \"X-Api-Key: abc123\" -H \"Authorization: Bearer abc123\")",
          "timeout_description": "Set connection timeout in milliseconds",
          "trust_description": "Trust the server (bypass all tool call confirmation prompts)",
          "description_description": "Set the description for the server",
          "include_tools_description": "A comma-separated list of tools to include",
          "exclude_tools_description": "A comma-separated list of tools to exclude",
          "already_configured": "MCP server \"{name}\" is already configured within {scope} settings.",
          "updated": "MCP server \"{name}\" updated in {scope} settings.",
          "added": "MCP server \"{name}\" added to {scope} settings. ({transport})"
        },
        "remove": {
          "description": "Remove a server",
          "usage": "Usage: auditaria mcp remove [options] <name>",
          "name_description": "Name of the server",
          "scope_description": "Configuration scope (user or project)",
          "not_found": "Server \"{name}\" not found in {scope} settings.",
          "removed": "Server \"{name}\" removed from {scope} settings."
        },
        "list": {
          "description": "List all configured MCP servers",
          "no_servers": "No MCP servers configured.",
          "configured_servers": "Configured MCP servers:\n",
          "status_connected": "Connected",
          "status_connecting": "Connecting",
          "status_disconnected": "Disconnected"
        }
      },
      "no_servers": "No MCP servers configured. Opening documentation in your browser: {url}",
      "no_servers_sandbox": "No MCP servers configured. Please open the following URL in your browser to view documentation:\n{url}",
      "no_servers_docs_command": "No MCP servers configured. Please view MCP documentation in your browser: {url} or use the cli /docs command",
      "servers_starting": "‚è≥ MCP servers are starting up ({count} initializing)...",
      "connecting_servers": "Connecting to MCP servers... ({connected}/{total})",
      "first_startup_note": "Note: First startup may take longer. Tool availability will update automatically.",
      "configured_servers": "Configured MCP servers:",
      "status": {
        "ready": "Ready",
        "starting": "Starting... (first startup may take longer)",
        "disconnected": "Disconnected"
      },
      "tools_count": "({count} tools)",
      "tools_when_ready": "(tools will appear when ready)",
      "tools_and_prompts_when_ready": "(tools and prompts will appear when ready)",
      "tools_cached": "({count} tools cached)",
      "no_tools": "No tools available",
      "no_tools_or_prompts": "No tools or prompts available",
      "parameters": "Parameters:",
      "refresh": {
        "description": "Restarts MCP servers.",
        "restarting": "Restarting MCP servers..."
      },
      "oauth": {
        "requires_auth": "üîê '{serverName}' requires OAuth authentication",
        "config_failed": "‚ùå Could not configure OAuth for '{serverName}' - please authenticate manually with /mcp auth {serverName}",
        "starting_auth": "Starting OAuth authentication for server '{serverName}'...",
        "auth_successful": "OAuth authentication successful for server '{serverName}'",
        "auth_failed": "Failed to handle automatic OAuth for server '{serverName}': {error}",
        "retrying_connection": "Retrying connection to '{serverName}' with OAuth token...",
        "found_stored_token": "Found stored OAuth token for server '{serverName}'",
        "token_rejected_sse": "Stored OAuth token for SSE server '{serverName}' was rejected. Please re-authenticate using: /mcp auth {serverName}",
        "no_auth_config_sse": "401 error received for SSE server '{serverName}' without OAuth configuration. Please authenticate using: /mcp auth {serverName}",
        "no_www_auth_header": "No www-authenticate header in error, trying to fetch it from server...",
        "found_www_auth": "Found www-authenticate header from server: {header}",
        "received_401_with_header": "Received 401 with www-authenticate header: {header}",
        "attempting_discovery": "üîç Attempting OAuth discovery for '{serverName}'...",
        "discovered_from_base": "Discovered OAuth configuration from base URL for server '{serverName}'",
        "discovery_failed": "‚ùå OAuth discovery failed for '{serverName}' - please authenticate manually with /mcp auth {serverName}",
        "no_auth_config_found": "‚ùå '{serverName}' requires authentication but no OAuth configuration found",
        "requires_auth_command": "MCP server '{serverName}' requires OAuth authentication. Please authenticate using the /mcp auth command.",
        "failed_connect_oauth": "Failed to connect with OAuth token: {error}",
        "failed_create_transport": "Failed to create OAuth transport for server '{serverName}'",
        "failed_get_token": "Failed to get OAuth token for server '{serverName}'",
        "failed_get_credentials": "Failed to get credentials for server '{serverName}' after successful OAuth authentication",
        "failed_stored_credentials": "Failed to get stored credentials for server '{serverName}'",
        "config_failed_manual": "OAuth configuration failed for '{serverName}'. Please authenticate manually with /mcp auth {serverName}",
        "requires_auth_config": "MCP server '{serverName}' requires authentication. Please configure OAuth or check server settings."
      },
      "auth": {
        "description": "Authenticate with an OAuth-enabled MCP server",
        "config_not_loaded": "Config not loaded.",
        "no_oauth_servers": "No MCP servers configured with OAuth authentication.",
        "oauth_servers_list": "MCP servers with OAuth authentication:\n{servers}\n\nUse /mcp auth <server-name> to authenticate.",
        "server_not_found": "MCP server '{serverName}' not found.",
        "starting_auth": "Starting OAuth authentication for MCP server '{serverName}'...",
        "auth_successful": "‚úÖ Successfully authenticated with MCP server '{serverName}'!",
        "rediscovering_tools": "Re-discovering tools from '{serverName}'...",
        "auth_and_refresh_successful": "Successfully authenticated and refreshed tools for '{serverName}'.",
        "auth_failed": "Failed to authenticate with MCP server '{serverName}': {error}"
      },
      "prompts": {
        "missing_arguments": "Missing required argument(s): {missingArgNames}"
      },
      "google_credentials": {
        "scopes_required": "Scopes must be provided in the oauth config for Google Credentials provider",
        "failed_get_token": "Failed to get access token from Google ADC",
        "no_url_configured": "No URL configured for Google Credentials MCP server"
      },
      "prompts": {
        "config_not_loaded": "Config not loaded.",
        "server_config_not_found": "MCP server config not found for '{serverName}'.",
        "invoke_error": "Error invoking prompt: {error}",
        "empty_response": "Received an empty or invalid prompt response from the server.",
        "missing_arguments": "Missing required argument(s): {missingArgNames}",
        "no_arguments": "Prompt \"{promptName}\" has no arguments.",
        "arguments_help_intro": "Arguments for \"{promptName}\":",
        "arguments_usage_note": "You can provide arguments by name (e.g., --argName=\"value\") or by position.",
        "arguments_example": "e.g., {promptName} {positionalExample} is equivalent to {promptName} {namedExample}",
        "argument_required_yes": "yes",
        "argument_required_no": "no"
      }
    },
    "extensions": {
      "description": "list active extensions",
      "no_extensions": "No active extensions.",
      "active_extensions": "Active extensions:",
      "manage": {
        "description": "Manage Auditaria CLI extensions.",
        "need_command": "You need at least one command before continuing."
      },
      "install": {
        "description": "Installs an extension from a git repository URL or a local path.",
        "source_description": "The git URL of the extension to install.",
        "path_description": "Path to a local extension directory.",
        "ref_description": "The git ref to install from.",
        "missing_source_or_path": "Either --source or --path must be provided.",
        "invalid_source_format": "The source \"{source}\" is not a valid URL format.",
        "success": "Extension \"{extensionName}\" installed successfully and enabled.",
        "untrusted_folder": "Could not install extension from untrusted folder at {source}",
        "github": {
          "invalid_source": "Invalid GitHub repository source: {source}. Expected \"owner/repo\" or a github repo uri.",
          "ssh_not_supported": "GitHub release-based extensions are not supported for SSH. You must use an HTTPS URI with a personal access token to download releases from private repositories. You can set your personal access token in the GITHUB_TOKEN environment variable and install the extension via SSH."
        }
      },
      "uninstall": {
        "description": "Uninstalls an extension.",
        "name_description": "The name or source path of the extension to uninstall.",
        "missing_name": "Please include the name of the extension to uninstall as a positional argument.",
        "success": "Extension \"{name}\" successfully uninstalled.",
        "not_found": "Extension not found."
      },
      "list": {
        "description": "Lists installed extensions.",
        "no_extensions": "No extensions installed.",
        "installed_extensions": "Installed extensions:",
        "status": {
          "active": "active",
          "disabled": "disabled",
          "unknown": "unknown state"
        },
        "unhandled_state_error": "Unhandled ExtensionUpdateState {state}"
      },
      "update": {
        "description": "Updates all extensions or a named extension to the latest version.",
        "name_description": "The name of the extension to update.",
        "all_description": "Update all extensions.",
        "usage": "Usage: /extensions update <extension-names>|--all",
        "success": "Extension \"{name}\" successfully updated: {originalVersion} ‚Üí {updatedVersion}.",
        "failed": "Extension \"{name}\" failed to update.",
        "not_found": "Extension \"{extensionName}\" not found. Run auditaria extensions list to see available extensions.",
        "missing_metadata": "Extension cannot be updated because it is missing the .gemini-extension-install.json file. To update manually, uninstall and then reinstall the updated version.",
        "not_found_after_install": "Updated extension not found after installation.",
        "error_rolling_back": "Error updating extension, rolling back. {error}",
        "no_extensions": "No extensions to update.",
        "missing_argument": "Either an extension name or --all must be provided",
        "cannot_update": "Extension {name} cannot be updated.",
        "restart_required": "Restart Auditaria CLI to see the changes.",
        "already_up_to_date": "Extension \"{name}\" already up to date.",
        "cannot_update_type_unknown": "Extension {name} cannot be updated, type is unknown.",
        "linked_no_update": "Extension is linked so does not need to be updated"
      },
      "disable": {
        "description": "Disables an extension.",
        "name_description": "The name of the extension to disable.",
        "scope_description": "The scope to disable the extension in.",
        "success": "Extension \"{name}\" successfully disabled for scope \"{scope}\"."
      },
      "enable": {
        "description": "Enables an extension.",
        "name_description": "The name of the extension to enable.",
        "scope_description": "The scope to enable the extension in. If not set, will be enabled in all scopes.",
        "success_with_scope": "Extension \"{name}\" successfully enabled for scope \"{scope}\".",
        "success_all_scopes": "Extension \"{name}\" successfully enabled in all scopes."
      },
      "link": {
        "description": "Links an extension from a local path. Updates made to the local path will always be reflected.",
        "path_description": "The name of the extension to link.",
        "success": "Extension \"{extensionName}\" linked successfully and enabled."
      },
      "new": {
        "description": "Create a new extension from a boilerplate example.",
        "path_description": "The path to create the extension in.",
        "template_description": "The boilerplate template to use.",
        "success": "Successfully created new extension from template \"{template}\" at {path}.",
        "install_help": "You can install this using \"gemini extensions link {path}\" to test it out.",
        "path_exists": "Path already exists: {path}"
      }
    },
    "tools": {
      "description": "list available Gemini CLI tools",
      "description_with_usage": "list available Gemini CLI tools. Usage: /tools [desc]",
      "available_tools": "Available Gemini CLI tools:",
      "no_tools": "No tools available",
      "error_retrieve": "Could not retrieve tools."
    },
    "about": {
      "description": "show version info",
      "no_sandbox": "no sandbox",
      "unknown_profile": "unknown",
      "unknown_model": "Unknown"
    },
    "bug": {
      "description": "submit a bug report",
      "submit_message": "To submit your bug report, please open the following URL in your browser:\n{url}",
      "browser_error": "Could not open URL in browser: {error}",
      "no_sandbox": "no sandbox",
      "unknown_profile": "unknown",
      "unknown_model": "Unknown"
    },
    "corgi": {
      "description": "Toggle corgi mode."
    },
    "chat": {
      "description": "Manage conversation history. Usage: /chat <list|save|resume|delete> <tag>",
      "no_client": "No chat client available for conversation status.",
      "missing_command": "Missing command\nUsage: /chat <list|save|resume|delete> <tag>",
      "save": {
        "description": "Save the current conversation as a checkpoint. Usage: /chat save <tag>",
        "missing_tag": "Missing tag. Usage: /chat save <tag>",
        "saved": "Conversation checkpoint saved with tag: {tag}.",
        "no_conversation": "No conversation found to save.",
        "no_client": "No chat client available to save conversation.",
        "overwrite_confirmation_prefix": "A checkpoint with the tag ",
        "overwrite_confirmation_suffix": " already exists. Do you want to overwrite it?"
      },
      "resume": {
        "description": "Resume a conversation from a checkpoint. Usage: /chat resume <tag>",
        "missing_tag": "Missing tag. Usage: /chat resume <tag>",
        "not_found": "No saved checkpoint found with tag: {tag}."
      },
      "list": {
        "description": "List saved conversation checkpoints",
        "saved_conversations": "list of saved conversations: {tags}",
        "no_checkpoints": "No saved conversation checkpoints found.",
        "header": "List of saved conversations:\n\n",
        "note": "Note: Newest last, oldest first",
        "invalid_date": "Invalid Date",
        "saved_on": "(saved on {date})"
      },
      "delete": {
        "description": "Delete a conversation checkpoint. Usage: /chat delete <tag>",
        "missing_tag": "Missing tag. Usage: /chat delete <tag>",
        "deleted": "Conversation checkpoint '{tag}' has been deleted.",
        "not_found": "Error: No checkpoint found with tag '{tag}'."
      },
      "share": {
        "description": "Share the current conversation to a markdown or json file. Usage: /chat share <file>",
        "invalid_format": "Invalid file format. Only .md and .json are supported.",
        "no_client": "No chat client available to share conversation.",
        "no_conversation": "No conversation found to share.",
        "shared": "Conversation shared to {filePath}",
        "error": "Error sharing conversation: {error}"
      },
      "unknown_command": "Unknown /chat command: {command}. Available: list, save, resume, delete, share"
    },
    "quit": {
      "description": "exit the cli",
      "alt_name": "exit"
    },
    "compress": {
      "description": "Compresses the context by replacing it with a summary.",
      "alt_name": "summarize",
      "already_compressing": "Already compressing, wait for previous request to complete",
      "failed": "Failed to compress chat history.",
      "failed_error": "Failed to compress chat history: {error}"
    },
    "fallback_improved": {
      "description": "toggle between improved fallback strategy (7 attempts, 2s delays, reset to Pro) and original Google behavior (2 attempts, exponential backoff)",
      "switched": "Fallback strategy switched from {currentMode} to {newMode}.\n\n{description}",
      "improved_description": "Improved strategy: 7 attempts with 2s delays, reset to Pro on each message",
      "original_description": "Original strategy: 2 attempts with exponential backoff, stay on Flash once switched"
    },
    "model_switch": {
      "description": "switch between Gemini Pro and Flash models",
      "switched": "Model switched to: {model} ({type})"
    },
    "stay_pro": {
      "description": "toggle whether to stay on Pro model (disable/enable fallback to Flash)",
      "disabled": "Fallback disabled - will stay on Gemini Pro even if rate limited",
      "enabled": "Fallback enabled - will switch to Flash if Pro is rate limited"
    },
    "ide": {
      "description": "manage IDE integration",
      "status": {
        "description": "check status of IDE integration",
        "connected": "üü¢ Connected",
        "connected_to": "üü¢ Connected to {ide}",
        "connecting": "üü° Connecting...",
        "disconnected": "üî¥ Disconnected"
      },
      "install": {
        "description": "install required IDE companion for {ide}",
        "installing": "Installing IDE companion...",
        "no_installer": "No installer available for your configured IDE.",
        "no_installer_with_ide": "No installer is available for {ide}. Please install the 'Gemini CLI Companion' extension manually from the marketplace.",
        "auto_enable_failed": "Failed to automatically enable IDE integration. To fix this, run the CLI in a new terminal window."
      },
      "enable": {
        "description": "enable IDE integration"
      },
      "disable": {
        "description": "disable IDE integration"
      }
    },
    "restore": {
      "description": "restore a tool call. This will reset the conversation and file history to the state it was in when the tool call was suggested",
      "no_directory": "Could not determine the .gemini directory path.",
      "no_restorable": "No restorable tool calls found.",
      "available_calls": "Available tool calls to restore:\n\n{fileList}",
      "file_not_found": "File not found: {file}",
      "project_restored": "Restored project to the state before the tool call.",
      "read_error": "Could not read restorable tool calls. This is the error: {error}"
    },
    "memory": {
      "description": "Commands for interacting with memory.",
      "show": {
        "description": "Show the current memory contents.",
        "content_with_files": "Current memory content from {fileCount} file(s):\n\n---\n{memoryContent}\n---",
        "empty": "Memory is currently empty."
      },
      "add": {
        "description": "Add content to the memory.",
        "usage": "Usage: /memory add <text to remember>",
        "attempting": "Attempting to save to memory: \"{text}\""
      },
      "refresh": {
        "description": "Refresh the memory from the source.",
        "refreshing": "Refreshing memory from source files...",
        "success_with_content": "Memory refreshed successfully. Loaded {charCount} characters from {fileCount} file(s).",
        "success_no_content": "Memory refreshed successfully. No memory content found.",
        "error": "Error refreshing memory: {error}"
      }
    },
    "help": {
      "description": "for help on gemini-cli"
    },
    "init": {
      "description": "Analyzes the project and creates a tailored GEMINI.md file.",
      "config_not_available": "Configuration not available.",
      "file_already_exists": "A GEMINI.md file already exists in this directory. No changes were made.",
      "file_created": "Empty GEMINI.md created. Now analyzing the project to populate it."
    },
    "clear": {
      "description": "clear the screen and conversation history"
    },
    "vim": {
      "description": "toggle vim mode on/off",
      "entered": "Entered Vim mode. Run /vim again to exit.",
      "exited": "Exited Vim mode."
    },
    "copy": {
      "description": "Copy the last result or code snippet to clipboard",
      "no_output": "No output in history",
      "success": "Last output copied to the clipboard",
      "error": "Failed to copy to the clipboard.",
      "no_text": "Last AI output contains no text to copy."
    },
    "directory": {
      "description": "Manage workspace directories",
      "config_not_available": "Configuration is not available.",
      "add": {
        "description": "Add directories to the workspace. Use comma to separate multiple paths",
        "provide_path": "Please provide at least one path to add.",
        "restrictive_sandbox": "The /directory add command is not supported in restrictive sandbox profiles. Please use --include-directories when starting the session instead.",
        "error_adding": "Error adding '{path}': {error}",
        "success": "Successfully added directories:\n- {directories}",
        "memory_files_added": "Successfully added GEMINI.md files from the following directories if there are:\n- {directories}",
        "memory_refresh_error": "Error refreshing memory: {error}"
      },
      "show": {
        "description": "Show all directories in the workspace",
        "current_directories": "Current workspace directories:\n{directories}"
      }
    },
    "setup_github": {
      "description": "Set up GitHub Actions",
      "error_git_root": "Unable to determine the Git root directory.",
      "error_not_github_repo": "Unable to determine the GitHub repository. /setup-github must be run from a git repository.",
      "tool_description": "Setting up GitHub Actions to triage issues and review PRs with Gemini.",
      "success_message": "Workflows downloaded successfully.",
      "success_message_with_next_steps": "Workflows downloaded successfully. Follow steps in https://github.com/google-github-actions/run-gemini-cli/blob/v0/README.md#quick-start (skipping the /setup-github step) to complete setup.",
      "success_message_dynamic": "Successfully downloaded {count} workflows and updated .gitignore. Follow the steps in https://github.com/google-github-actions/run-gemini-cli/blob/{releaseTag}/README.md#quick-start (skipping the /setup-github step) to complete setup.",
      "error_mkdir_failed": "Unable to create {directory} directory. Do you have file permissions in the current directory?"
    },
    "file_command": {
      "default_description": "Custom command from {filename}"
    },
    "terminal_setup": {
      "description": "Configure terminal keybindings for multiline input (VS Code, Cursor, Windsurf)",
      "restart_required": "Please restart your terminal for the changes to take effect.",
      "failed_configure": "Failed to configure terminal: {error}",
      "existing_keybindings": "Existing keybindings detected. Will not modify to avoid conflicts.",
      "shift_enter_exists": "- Shift+Enter binding already exists",
      "ctrl_enter_exists": "- Ctrl+Enter binding already exists",
      "check_manually": "Please check and modify manually if needed: {file}",
      "added_keybindings": "Added Shift+Enter and Ctrl+Enter keybindings to {terminal}.\nModified: {file}",
      "already_configured": "{terminal} keybindings already configured.",
      "failed_terminal": "Failed to configure {terminal}.\nFile: {file}\nError: {error}",
      "optimal_configured": "Your terminal is already configured for an optimal experience with multiline input (Shift+Enter and Ctrl+Enter).",
      "not_detected": "Could not detect terminal type. Supported terminals: VS Code, Cursor, and Windsurf.",
      "not_supported": "Terminal \"{terminal}\" is not supported yet."
    }
  },
  "help": {
    "section_basics": "Basics:",
    "section_commands": "Commands:",
    "section_shortcuts": "Keyboard Shortcuts:",
    "add_context": "Add context",
    "add_context_help": "Use {symbol} to specify files for context (e.g., {example}) to target specific files or folders.",
    "shell_mode": "Shell mode",
    "shell_mode_help": "Execute shell commands via {symbol} (e.g., {example}) or use natural language (e.g. {natural_example}).",
    "shell_command": "shell command",
    "mcp_command": "Model Context Protocol command (from external servers)",
    "keys": {
      "enter": "Enter",
      "ctrl_enter": "Ctrl+Enter",
      "ctrl_j": "Ctrl+J",
      "up_down": "Up/Down",
      "alt_left_right": "Alt+Left/Right",
      "shift_tab": "Shift+Tab",
      "ctrl_y": "Ctrl+Y",
      "esc": "Esc",
      "ctrl_c": "Ctrl+C",
      "ctrl_l": "Ctrl+L",
      "ctrl_x": "Ctrl+X",
      "ctrl_x_meta": "Ctrl+X / Meta+Enter"
    },
    "shortcuts": {
      "enter": "Send message",
      "new_line_win": "New line",
      "new_line_linux": "New line (Alt+Enter works for certain linux distros)",
      "cycle_history": "Cycle through your prompt history",
      "jump_words": "Jump through words in the input",
      "toggle_auto_accept": "Toggle auto-accepting edits",
      "toggle_yolo": "Toggle YOLO mode",
      "cancel": "Cancel operation",
      "cancel_clear": "Cancel operation / Clear input (double press)",
      "quit": "Quit application",
      "clear_screen": "Clear the screen",
      "external_editor": "Open input in external editor",
      "full_shortcuts_intro": "For a full list of shortcuts, see",
      "docs_path": "docs/keyboard-shortcuts.md"
    }
  },
  "auth_dialog": {
    "dialog_title": "Get started",
    "dialog_question": "How would you like to authenticate for this project?",
    "options": {
      "login_google": "Login with Google",
      "login_google_free": "Login with Google - Free Tier",
      "login_google_gca": "Login with Google - Gemini Code Assist (Requires GOOGLE_CLOUD_PROJECT)",
      "cloud_shell": "Use Cloud Shell user credentials",
      "gemini_api": "Use Gemini API Key",
      "vertex_ai": "Vertex AI"
    },
    "messages": {
      "api_key_detected": "Existing API key detected (GEMINI_API_KEY). Select \"Gemini API Key\" option to use it.",
      "invalid_default_auth_type": "Invalid value for GEMINI_DEFAULT_AUTH_TYPE: \"{defaultAuthType}\". Valid values are: {validValues}.",
      "must_select_auth": "You must select an auth method to proceed. Press Ctrl+C twice to exit.",
      "no_auth_selected": "No authentication method selected.",
      "authenticated_via": "Authenticated via \"{authType}\".",
      "use_enter": "(Use Enter to select)",
      "terms_privacy": "Terms of Services and Privacy Notice for Gemini CLI",
      "auth_timeout": "Authentication timed out. Please try again.",
      "auth_cancelled": "Authentication cancelled.",
      "waiting_for_auth": "Waiting for auth... (Press ESC or CTRL+C to cancel)",
      "failed_login": "Failed to login. Message: {error}"
    }
  },
  "footer": {
    "macos_seatbelt": "macOS Seatbelt",
    "no_sandbox": "no sandbox",
    "see_docs": "(see /docs)",
    "context_left": "({percentage}% context left)",
    "debug_mode": "--debug",
    "untrusted": "untrusted"
  },
  "input": {
    "placeholder": "  Type your message or @path/to/file",
    "placeholder_vim": "  Press 'i' for INSERT mode and 'Esc' for NORMAL mode.",
    "escape_to_clear": "Press Esc again to clear.",
    "aria_shell_mode": "Shell mode",
    "aria_yolo_mode": "YOLO mode",
    "aria_accepting_edits": "Accepting edits"
  },
  "tool_confirmation": {
    "modify_in_progress": "Modify in progress: ",
    "save_close_editor": "Save and close external editor to continue",
    "questions": {
      "apply_change": "Apply this change?",
      "allow_execution": "Allow execution?",
      "allow_execution_of": "Allow execution of: '{command}'?",
      "do_you_want_proceed": "Do you want to proceed?",
      "allow_mcp_tool": "Allow execution of MCP tool \"{toolName}\" from server \"{serverName}\"?"
    },
    "options": {
      "yes_once": "Yes, allow once",
      "yes_always": "Yes, allow always",
      "yes_always_ellipsis": "Yes, allow always ...",
      "yes_always_command": "Yes, allow always \"{command} ...\"",
      "yes_always_tool": "Yes, always allow tool \"{toolName}\" from server \"{serverName}\"",
      "yes_always_server": "Yes, always allow all tools from server \"{serverName}\"",
      "modify_editor": "Modify with external editor",
      "no_esc": "No (esc)",
      "no_suggest_changes": "No, suggest changes (esc)",
      "yes": "Yes",
      "no": "No"
    },
    "mcp_labels": {
      "server": "MCP Server: {serverName}",
      "tool": "Tool: {toolName}"
    },
    "info": {
      "urls_to_fetch": "URLs to fetch:"
    },
    "shell_confirmation": {
      "title": "Shell Command Execution",
      "description": "A custom command wants to run the following shell commands:",
      "question": "Do you want to proceed?",
      "options": {
        "yes_once": "Yes, allow once",
        "yes_always_session": "Yes, allow always for this session",
        "no_esc": "No (esc)"
      }
    }
  },
  "suggestions": {
    "loading": "Loading suggestions..."
  },
  "loading": {
    "waiting_confirmation": "Waiting for user confirmation...",
    "phrases": [
      "I'm Feeling Lucky",
      "Shipping awesomeness... ",
      "Painting the serifs back on...",
      "Navigating the slime mold...",
      "Consulting the digital spirits...",
      "Reticulating splines...",
      "Warming up the AI hamsters...",
      "Asking the magic conch shell...",
      "Generating witty retort...",
      "Polishing the algorithms...",
      "Don't rush perfection (or my code)...",
      "Brewing fresh bytes...",
      "Counting electrons...",
      "Engaging cognitive processors...",
      "Checking for syntax errors in the universe...",
      "One moment, optimizing humor...",
      "Shuffling punchlines...",
      "Untangling neural nets...",
      "Compiling brilliance...",
      "Loading wit.exe...",
      "Summoning the cloud of wisdom...",
      "Preparing a witty response...",
      "Just a sec, I'm debugging reality...",
      "Confuzzling the options...",
      "Tuning the cosmic frequencies...",
      "Crafting a response worthy of your patience...",
      "Compiling the 1s and 0s...",
      "Resolving dependencies... and existential crises...",
      "Defragmenting memories... both RAM and personal...",
      "Rebooting the humor module...",
      "Caching the essentials (mostly cat memes)...",
      "Running sudo make me a sandwich...",
      "Optimizing for ludicrous speed",
      "Swapping bits... don't tell the bytes...",
      "Garbage collecting... be right back...",
      "Assembling the interwebs...",
      "Converting coffee into code...",
      "Updating the syntax for reality...",
      "Rewiring the synapses...",
      "Looking for a misplaced semicolon...",
      "Greasin' the cogs of the machine...",
      "Pre-heating the servers...",
      "Calibrating the flux capacitor...",
      "Engaging the improbability drive...",
      "Channeling the Force...",
      "Aligning the stars for optimal response...",
      "So say we all...",
      "Loading the next great idea...",
      "Just a moment, I'm in the zone...",
      "Preparing to dazzle you with brilliance...",
      "Just a tick, I'm polishing my wit...",
      "Hold tight, I'm crafting a masterpiece...",
      "Just a jiffy, I'm debugging the universe...",
      "Just a moment, I'm aligning the pixels...",
      "Just a sec, I'm optimizing the humor...",
      "Just a moment, I'm tuning the algorithms...",
      "Warp speed engaged...",
      "Mining for more Dilithium crystals...",
      "I'm Giving Her all she's got Captain!",
      "Don't panic...",
      "Following the white rabbit...",
      "The truth is in here... somewhere...",
      "Blowing on the cartridge...",
      "Looking for the princess in another castle...",
      "Loading... Do a barrel roll!",
      "Waiting for the respawn...",
      "Finishing the Kessel Run in less than 12 parsecs...",
      "The cake is not a lie, it's just still loading...",
      "Fiddling with the character creation screen...",
      "Just a moment, I'm finding the right meme...",
      "Pressing 'A' to continue...",
      "Herding digital cats...",
      "Polishing the pixels...",
      "Finding a suitable loading screen pun...",
      "Distracting you with this witty phrase...",
      "Almost there... probably...",
      "Our hamsters are working as fast as they can...",
      "Giving Cloudy a pat on the head...",
      "Petting the cat...",
      "Rickrolling my boss...",
      "Never gonna give you up, never gonna let you down...",
      "Slapping the bass...",
      "Tasting the snozberries...",
      "I'm going the distance, I'm going for speed...",
      "Is this the real life? Is this just fantasy?...",
      "I've got a good feeling about this...",
      "Poking the bear...",
      "Doing research on the latest memes...",
      "Figuring out how to make this more witty...",
      "Hmmm... let me think...",
      "What do you call a fish with no eyes? A fsh...",
      "Why did the computer go to therapy? It had too many bytes...",
      "Why don't programmers like nature? It has too many bugs...",
      "Why do programmers prefer dark mode? Because light attracts bugs...",
      "Why did the developer go broke? Because they used up all their cache...",
      "What can you do with a broken pencil? Nothing, it's pointless...",
      "Applying percussive maintenance...",
      "Searching for the correct USB orientation...",
      "Ensuring the magic smoke stays inside the wires...",
      "Rewriting in Rust for no particular reason...",
      "Trying to exit Vim...",
      "Spinning up the hamster wheel...",
      "That's not a bug, it's an undocumented feature...",
      "Engage.",
      "I'll be back... with an answer.",
      "My other process is a TARDIS...",
      "Communing with the machine spirit...",
      "Letting the thoughts marinate...",
      "Just remembered where I put my keys...",
      "Pondering the orb...",
      "I've seen things you people wouldn't believe... like a user who reads loading messages.",
      "Initiating thoughtful gaze...",
      "What's a computer's favorite snack? Microchips.",
      "Why do Java developers wear glasses? Because they don't C#.",
      "Charging the laser... pew pew!",
      "Dividing by zero... just kidding!",
      "Looking for an adult superviso... I mean, processing.",
      "Making it go beep boop.",
      "Buffering... because even AIs need a moment.",
      "Entangling quantum particles for a faster response...",
      "Polishing the chrome... on the algorithms.",
      "Are you not entertained? (Working on it!)",
      "Summoning the code gremlins... to help, of course.",
      "Just waiting for the dial-up tone to finish...",
      "Recalibrating the humor-o-meter.",
      "My other loading screen is even funnier.",
      "Pretty sure there's a cat walking on the keyboard somewhere...",
      "Enhancing... Enhancing... Still loading.",
      "It's not a bug, it's a feature... of this loading screen.",
      "Have you tried turning it off and on again? (The loading screen, not me.)",
      "Constructing additional pylons...",
      "New line? That's Ctrl+J."
    ]
  },
  "theme_dialog": {
    "title": "Select Theme",
    "apply_to": "Apply To",
    "preview": "Preview",
    "custom_type": "Custom",
    "theme_type_preview": "{themeType} Theme Preview",
    "scope_options": {
      "user_settings": "User Settings",
      "workspace_settings": "Workspace Settings",
      "system_settings": "System Settings"
    },
    "messages": {
      "also_modified_in": "(Also modified in {scope})",
      "modified_in": "(Modified in {scope})",
      "use_enter_select": "(Use Enter to select",
      "tab_to_change_focus": ", Tab to change focus)",
      "use_enter_with_mode": "(Use Enter to {action}, Tab to {switchAction})",
      "select": "select",
      "apply_scope": "apply scope",
      "configure_scope": "configure scope",
      "select_theme": "select theme"
    }
  },
  "settings_dialog": {
    "title": "Settings",
    "apply_to": "Apply To",
    "scope_options": {
      "user_settings": "User Settings",
      "workspace_settings": "Workspace Settings",
      "system_settings": "System Settings"
    },
    "messages": {
      "use_enter_tab": "(Use Enter to select, Tab to change focus)",
      "restart_required": "To see changes, Gemini CLI must be restarted. Press r to exit and apply changes now.",
      "also_modified_in": "(Also modified in {scope})",
      "modified_in": "(Modified in {scope})"
    },
    "labels": {
      "code_changes": "Code Changes:",
      "max_session_turns": "Max Session Turns",
      "memory_discovery_max_dirs": "Memory Discovery Max Dirs",
      "show_memory_usage": "Show Memory Usage",
      "enable_usage_statistics": "Enable Usage Statistics",
      "auto_configure_max_old_space_size": "Auto Configure Max Old Space Size",
      "hide_window_title": "Hide Window Title",
      "hide_tips": "Hide Tips",
      "hide_banner": "Hide Banner",
      "hide_footer": "Hide Footer",
      "vim_mode": "Vim Mode",
      "ide_mode": "IDE Mode",
      "disable_loading_phrases": "Disable Loading Phrases",
      "respect_gitignore": "Respect .gitignore",
      "respect_geminiignore": "Respect .geminiignore",
      "enable_recursive_file_search": "Enable Recursive File Search",
      "disable_auto_update": "Disable Auto Update",
      "load_memory_from_include_directories": "Load Memory From Include Directories",
      "folder_trust_feature": "Folder Trust Feature",
      "folder_trust": "Folder Trust",
      "show_line_numbers": "Show Line Numbers",
      "show_citations": "Show Citations",
      "use_node_pty_shell": "Use node-pty for Shell Execution",
      "skip_next_speaker_check": "Skip Next Speaker Check",
      "auto_accept": "Auto Accept",
      "custom_witty_phrases": "Custom Witty Phrases"
    },
    "descriptions": {
      "auto_accept": "Automatically accept and execute tool calls that are considered safe (e.g., read-only operations).",
      "custom_witty_phrases": "Custom witty phrases to display during loading."
    }
  },
  "editor_dialog": {
    "title": "Select Editor",
    "apply_to": "Apply To",
    "editor_preference": "Editor Preference",
    "scope_options": {
      "user_settings": "User Settings",
      "workspace_settings": "Workspace Settings"
    },
    "messages": {
      "also_modified_in": "(Also modified in {scope})",
      "modified_in": "(Modified in {scope})",
      "use_enter_tab": "(Use Enter to select, Tab to change focus)",
      "supported_editors": "These editors are currently supported. Please note that some editors cannot be used in sandbox mode.",
      "preferred_editor": "Your preferred editor is:",
      "none": "None"
    }
  },
  "language_dialog": {
    "title": "Language Selection",
    "first_time_title": "Welcome! Select Your Language",
    "first_time_description": "Choose your preferred language for the interface. You can change this later using the /language command.",
    "select_language": "Select Language",
    "apply_to": "Apply To",
    "loading_title": "Loading Available Languages...",
    "loading_message": "Discovering available language options...",
    "error_title": "Language Selection Error",
    "no_languages_available": "No language files found. Please ensure translation files are available.",
    "languages_count": "Available languages: {count}",
    "scope_options": {
      "user_settings": "User Settings",
      "workspace_settings": "Workspace Settings"
    },
    "messages": {
      "also_modified_in": "(Also modified in {scope})",
      "modified_in": "(Modified in {scope})",
      "use_enter_select": "(Use Enter to select",
      "tab_to_change_focus": ", Tab to change focus",
      "escape_to_cancel": ", Esc to cancel",
      "press_escape": "Press Esc to continue with default language."
    },
    "errors": {
      "failed_to_load": "Failed to load available languages. Using defaults."
    }
  },
  "language": {
    "initialization_failed": "Failed to load language \"{language}\". Using default.",
    "no_language_selected": "No language selected.",
    "changed_successfully": "Language changed to {language}.",
    "application_failed": "Failed to apply language \"{language}\". Please try again.",
    "must_select_language": "You must select a language to continue.",
    "welcome_message": "Welcome! Language has been set to {language}. You can change it anytime using the /language command.",
    "save_failed": "Failed to save language setting. Please try again."
  },
  "license": {
    "free_tier": "Free Tier (Login with Google)",
    "gca_standard": "Gemini Code Assist Standard (Google Workspace)",
    "gca_enterprise": "Gemini Code Assist Enterprise (Google Workspace)",
    "gca_generic": "Gemini Code Assist (Google Workspace)",
    "gemini_api_key": "Gemini API Key",
    "vertex_ai": "Vertex AI",
    "cloud_shell": "Cloud Shell"
  },
  "about_box": {
    "title": "About Gemini CLI",
    "labels": {
      "cli_version": "CLI Version",
      "git_commit": "Git Commit",
      "model": "Model",
      "sandbox": "Sandbox",
      "os": "OS",
      "auth_method": "Auth Method",
      "license": "License",
      "gcp_project": "GCP Project",
      "ide_client": "IDE Client"
    }
  },
  "tips": {
    "title": "Tips for getting started:",
    "tip1": "Ask questions, edit files, or run commands.",
    "tip2": "Be specific for the best results.",
    "tip3_with_gemini": "Create {filename} files to customize your interactions with Gemini.",
    "tip3_without_gemini": "{command} for more information.",
    "tip4": "{command} for more information."
  },
  "console_summary": {
    "error_count": "{count} error{plural}",
    "ctrl_o_details": "(ctrl+o for details)",
    "debug_console": "Debug Console",
    "ctrl_o_close": "ctrl+o to close"
  },
  "auto_accept": {
    "accepting_edits": "accepting edits",
    "yolo_mode": "YOLO mode",
    "shift_tab_toggle": " (shift + tab to toggle)",
    "ctrl_y_toggle": " (ctrl + y to toggle)"
  },
  "shell_mode": {
    "enabled": "shell mode enabled",
    "esc_to_disable": " (esc to disable)"
  },
  "loading_indicator": {
    "esc_to_cancel": " (esc to cancel, {time})",
    "seconds": "{elapsed}s",
    "minutes": "{duration}"
  },
  "show_more_lines": {
    "press_ctrl_s": "Press ctrl-s to show more lines"
  },
  "context_summary": {
    "using": "Using: ",
    "using_label": "Using:",
    "list_item_prefix": "  - ",
    "and": " and ",
    "context_files": "{count} {name} File{plural}",
    "mcp_servers": "{count} MCP Server{plural}",
    "ctrl_t_toggle": " (ctrl+t to toggle)",
    "ctrl_t_view": " (ctrl+t to view)"
  },
  "compression": {
    "compressing": "Compressing chat history",
    "compressed": "Chat history compressed from {original} to {new} tokens.",
    "unknown": "unknown",
    "error_determine_tokens": "Could not determine compressed history token count."
  },
  "stats": {
    "session_stats": "Session Stats",
    "session_goodbye": "Agent powering down. Goodbye!",
    "model_stats_title": "Model Stats For Nerds",
    "tool_stats_title": "Tool Stats For Nerds",
    "no_api_calls": "No API calls have been made in this session.",
    "no_tool_calls": "No tool calls have been made in this session.",
    "tip_full_breakdown": "¬ª Tip: For a full token breakdown, run `/stats model`.",
    "sections": {
      "interaction_summary": "Interaction Summary",
      "performance": "Performance",
      "model_usage": "Model Usage",
      "user_decision_summary": "User Decision Summary",
      "api": "API"
    },
    "labels": {
      "session_id": "Session ID:",
      "tool_calls": "Tool Calls:",
      "success_rate": "Success Rate:",
      "user_agreement": "User Agreement:",
      "wall_time": "Wall Time:",
      "agent_active": "Agent Active:",
      "api_time": "API Time:",
      "tool_time": "Tool Time:",
      "metric": "Metric",
      "tool_name": "Tool Name",
      "calls": "Calls",
      "avg_duration": "Avg Duration",
      "requests": "Requests",
      "errors": "Errors",
      "avg_latency": "Avg Latency",
      "tokens": "Tokens",
      "total": "Total",
      "prompt": "Prompt",
      "cached": "Cached",
      "thoughts": "Thoughts",
      "tool": "Tool",
      "output": "Output",
      "input_tokens": "Input Tokens",
      "output_tokens": "Output Tokens",
      "reqs": "Reqs",
      "total_reviewed": "Total Reviewed Suggestions:",
      "accepted": " ¬ª Accepted:",
      "rejected": " ¬ª Rejected:",
      "modified": " ¬ª Modified:",
      "overall_agreement": " Overall Agreement Rate:",
      "reviewed": "reviewed",
      "savings_highlight": "Savings Highlight:"
    },
    "messages": {
      "savings_highlight": "Savings Highlight:",
      "cached_tokens": "{count} ({percentage}%) of input tokens were served from the cache, reducing costs.",
      "tip_full_breakdown": "¬ª Tip: For a full token breakdown, run `/stats model`.",
      "reviewed_count": "({count} reviewed)"
    }
  },
  "errors": {
    "unknown_command": "Unknown command: {command}",
    "tool_registry_error": "Could not retrieve tool registry.",
    "requires_subcommand": "Command '/{command}' requires a subcommand. Available:\n{subcommands}",
    "ide_mode_port_missing": "Could not connect to IDE. Make sure you have the companion VS Code extension installed from the marketplace or via /ide install.",
    "rate_limit_google_generic_quota_free": "\nYou have reached your daily quota limit. To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist, or use /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "rate_limit_google_paid": "\nPossible quota limitations in place or slow response times detected. Switching to the {fallbackModel} model for the rest of this session. We appreciate you for choosing Gemini Code Assist and the Gemini CLI.",
    "rate_limit_google_pro_quota_paid": "\nYou have reached your daily {currentModel} quota limit. You will be switched to the {fallbackModel} model for the rest of this session. We appreciate you for choosing Gemini Code Assist and the Gemini CLI. To continue accessing the {currentModel} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "rate_limit_google_generic_quota_paid": "\nYou have reached your daily quota limit. We appreciate you for choosing Gemini Code Assist and the Gemini CLI. To continue accessing the {currentModel} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "rate_limit_use_gemini": "\nPlease wait and try again later. To increase your limits, request a quota increase through AI Studio, or switch to another /auth method",
    "rate_limit_vertex": "\nPlease wait and try again later. To increase your limits, request a quota increase through Vertex, or switch to another /auth method",
    "rate_limit_default": "\nPossible quota limitations in place or slow response times detected. Switching to the {fallbackModel} model for the rest of this session.",
    "unhandled_rejection": "=========================================\nThis is an unexpected error. Please file a bug report using the /bug tool.\nCRITICAL: Unhandled Promise Rejection!\n=========================================\nReason: {reason}{stack}",
    "cyclic_schema_error": "\n\nThis error was probably caused by cyclic schema references in one of the following tools, try disabling them:\n\n - ",
    "at_command_processing_error": "Exiting due to an error processing the @ command.",
    "command_confirmation_required": "Exiting due to a confirmation prompt requested by the command.",
    "command_result_unsupported_noninteractive": "Exiting due to command result that is not supported in non-interactive mode.",
    "turn_limit_reached": "Reached max session turns for this session. Increase the number of turns by specifying maxSessionTurns in settings.json.",
    "config_error": "{errors}\nPlease fix the configuration file(s) and try again.",
    "sandbox_invalid_command": "Invalid sandbox command '{command}'. Must be one of {commands}",
    "sandbox_missing_command": "Missing sandbox command '{command}' (from GEMINI_SANDBOX)",
    "sandbox_true_no_command": "GEMINI_SANDBOX is true but failed to determine command for sandbox; install docker or podman or specify command in GEMINI_SANDBOX",
    "sandbox_build_not_allowed": "Cannot BUILD_SANDBOX when using macOS Seatbelt",
    "sandbox_missing_profile": "Missing macos seatbelt profile file '{file}'",
    "sandbox_proxy_failed": "Proxy command '{command}' exited with code {code}, signal {signal}",
    "sandbox_proxy_container_failed": "Proxy container command '{command}' exited with code {code}, signal {signal}",
    "sandbox_build_not_installed": "Cannot build sandbox using installed gemini binary; run `npm link ./packages/cli` under gemini-cli repo to switch to linked binary.",
    "sandbox_image_missing": "Sandbox image '{image}' is missing or could not be pulled. {remedy}",
    "sandbox_mount_not_absolute": "Path '{path}' listed in SANDBOX_MOUNTS must be absolute",
    "sandbox_mount_missing": "Missing mount path '{path}' listed in SANDBOX_MOUNTS",
    "sandbox_env_invalid": "SANDBOX_ENV must be a comma-separated list of key=value pairs",
    "auth_failed_user_code": "Failed to authenticate with user code.",
    "auth_failed_browser": "Failed to open browser.",
    "tool_not_found": "Tool \"{toolName}\" not found in registry. Tools must use the exact names that are registered.{suggestion}",
    "tool_suggestion_single": " Did you mean \"{suggestedName}\"?",
    "tool_suggestion_multiple": " Did you mean one of: {suggestedNames}?"
  },
  "diff": {
    "no_content": "No diff content.",
    "no_changes": "No changes detected."
  },
  "show_more_content": {
    "first_lines_hidden": "... first {count} line{plural} hidden ...",
    "last_lines_hidden": "... last {count} line{plural} hidden ..."
  },
  "update": {
    "available": "Auditaria CLI update available! {current} ‚Üí {latest}\nRun npm install -g {packageName} to update",
    "available_nightly": "A new version of Auditaria CLI is available! {current} ‚Üí {latest}",
    "success": "Update successful! The new version will be used on your next run.",
    "failed": "Automatic update failed. Please try updating manually",
    "failed_with_details": "Automatic update failed. Please try updating manually. (command: {command}, stderr: {stderr})",
    "failed_with_error": "Automatic update failed. Please try updating manually. (error: {error})"
  },
  "shell": {
    "binary_output_detected": "[Binary output detected. Halting stream...]",
    "receiving_binary_output": "[Receiving binary output... {size} received]",
    "binary_output_not_shown": "[Command produced binary output, which is not shown.]",
    "no_output": "(Command produced no output)",
    "command_cancelled": "Command was cancelled.",
    "command_terminated_signal": "Command terminated by signal: {signal}.",
    "command_exit_code": "Command exited with code {code}.",
    "directory_change_warning": "WARNING: shell mode is stateless; the directory change to '{directory}' will not persist.",
    "unexpected_error": "An unexpected error occurred: {error}",
    "focus": {
      "focused": "(Focused)",
      "focus_hint": "(ctrl+f to focus)"
    },
    "permissions": {
      "commands_not_on_allowlist": "Command(s) not on the global or session allowlist. Disallowed commands: {commands}",
      "commands_not_in_allowed_list": "Command(s) not in the allowed commands list. Disallowed commands: {commands}"
    }
  },
  "at_command": {
    "tool_not_found": "Error: read_many_files tool not found.",
    "invalid_command": "Error: Invalid @ command '{command}'. No path specified.",
    "successfully_read": "Successfully read: {files}",
    "content_header": "\n--- Content from referenced files ---",
    "content_from_file": "\nContent from @{file}:\n",
    "content_footer": "\n--- End of content ---",
    "error_reading_files": "Error reading files ({files}): {error}"
  },
  "theme": {
    "no_color_env": "Theme configuration unavailable due to NO_COLOR env variable.",
    "not_found": "Theme \"{theme}\" not found.",
    "file_outside_home": "Theme file at \"{themePath}\" is outside your home directory. Only load themes from trusted sources.",
    "invalid_file_theme": "Invalid custom theme from file \"{themePath}\": {error}",
    "file_theme_warning": "Theme from \"{themePath}\": {warning}",
    "could_not_load_file": "Could not load theme from file \"{themePath}\":"
  },
  "editor": {
    "preference_set": "Editor preference set to \"{editor}\" in {scope} settings.",
    "preference_cleared": "Editor preference cleared in {scope} settings.",
    "failed_to_set": "Failed to set editor preference: {error}"
  },
  "privacy": {
    "oauth_not_used": "Oauth not being used",
    "no_current_tier": "CodeAssist server is missing a project ID",
    "loading": "Loading...",
    "error_loading_optin": "Error loading Opt-in settings: {error}",
    "press_esc_exit": "Press Esc to exit.",
    "yes": "Yes",
    "no": "No",
    "gemini_code_assist_notice_title": "Gemini Code Assist for Individuals Privacy Notice",
    "notice_intro": "This notice and our Privacy Policy {ref} describe how Gemini Code Assist handles your data. Please read them carefully.",
    "data_collection_description": "When you use Gemini Code Assist for individuals with Gemini CLI, Google collects your prompts, related code, generated output, code edits, related feature usage information, and your feedback to provide, improve, and develop Google products and services and machine learning technologies.",
    "human_review_description": "To help with quality and improve our products (such as generative machine-learning models), human reviewers may read, annotate, and process the data collected above. We take steps to protect your privacy as part of this process. This includes disconnecting the data from your Google Account before reviewers see or annotate it, and storing those disconnected copies for up to 18 months. Please don't submit confidential information or any data you wouldn't want a reviewer to see or Google to use to improve our products, services and machine-learning technologies.",
    "allow_data_usage_question": "Allow Google to use this data to develop and improve our products?",
    "press_enter_choose_exit": "Press Enter to choose an option and exit.",
    "gemini_api_key_notice_title": "Gemini API Key Notice",
    "gemini_api_terms_text": "By using the Gemini API {ref1}, Google AI Studio {ref2}, and the other Google developer services that reference these terms (collectively, the \"APIs\" or \"Services\"), you are agreeing to Google APIs Terms of Service (the \"API Terms\") {ref3}, and the Gemini API Additional Terms of Service (the \"Additional Terms\") {ref4}.",
    "vertex_ai_notice_title": "Vertex AI Notice",
    "vertex_ai_service_terms_text": "Service Specific Terms {ref1} are incorporated into the agreement under which Google has agreed to provide Google Cloud Platform {ref2} to Customer (the \"Agreement\"). If the Agreement authorizes the resale or supply of Google Cloud Platform under a Google Cloud partner or reseller program, then except for in the section entitled \"Partner-Specific Terms\", all references to Customer in the Service Specific Terms mean Partner or Reseller (as applicable), and all references to Customer Data in the Service Specific Terms mean Partner Data. Capitalized terms used but not defined in the Service Specific Terms have the meaning given to them in the Agreement."
  },
  "bfs_file_search": {
    "warn_unreadable_directory": "[WARN] Skipping unreadable directory: {directory} ({message})"
  },
  "tools": {
    "output_saved": "Output too long and was saved to: {outputFile}",
    "edit": {
      "file_not_found_create": "File not found. Cannot apply edit. Use an empty old_string to create a new file.",
      "file_not_found_raw": "File not found: {path}",
      "failed_create_exists": "Failed to edit. Attempted to create a file that already exists.",
      "failed_find_string": "Failed to edit, could not find the string to replace.",
      "failed_replacement_count": "Failed to edit, expected {expected} {term} but found {found}.",
      "validation_error": "Error: {error}",
      "error_preparing_edit": "Error preparing edit: {error}",
      "error_display": "Error: {error}",
      "no_changes_identical": "No changes to apply. The old_string and new_string are identical.",
      "created_file": "Created {file}",
      "error_writing_file": "Error writing file: {error}"
    },
    "replace": {
      "failed_find_string": "Failed to edit, could not find the string to replace.",
      "failed_replacement_count": "Failed to edit, expected {expectedReplacements} {occurrenceTerm} but found {occurrences}.",
      "no_changes_identical": "No changes to apply. The old_string and new_string are identical.",
      "no_changes_required": "No changes required. The file already meets the specified conditions.",
      "file_not_found_create": "File not found. Cannot apply edit. Use an empty old_string to create a new file.",
      "failed_read_file": "Failed to read content of file.",
      "failed_create_exists": "Failed to edit. Attempted to create a file that already exists.",
      "error_preparing_edit": "Error preparing edit: {errorMsg}",
      "error_display": "Error: {error}",
      "created_file_short": "Created {file}",
      "created_new_file": "Created new file: {file} with provided content.",
      "modified_file": "Successfully modified file: {file} ({occurrences} replacements)."
    },
    "shell": {
      "name": "Shell Command",
      "validation_error": "Error: {error}",
      "command_cancelled_user": "Command cancelled by user.",
      "command_terminated_signal": "Command terminated by signal: {signal}",
      "command_failed": "Command failed: {error}",
      "command_exit_code": "Command exited with code: {code}"
    },
    "grep": {
      "no_matches_detailed": "No matches found for pattern \"{pattern}\" {searchLocation}{filter}.",
      "no_matches": "No matches found",
      "invalid_parameters": "Model provided invalid parameters. Error: {error}",
      "matches_found": "Found {count} {term}",
      "search_error": "Error: {error}"
    },
    "ripgrep": {
      "path_outside_workspace": "Path validation failed: Attempted path \"{path}\" resolves outside the allowed workspace directories: {directories}",
      "path_not_directory": "Path is not a directory: {path}",
      "path_not_exist": "Path does not exist: {path}",
      "path_access_failed": "Failed to access path stats for {path}: {error}",
      "no_matches_detailed": "No matches found for pattern \"{pattern}\" {searchLocation}{filter}.",
      "no_matches": "No matches found",
      "matches_found_detailed": "Found {count} {term} for pattern \"{pattern}\" {searchLocation}{filter}",
      "matches_limited": " (results limited to {limit} matches for performance)",
      "matches_found": "Found {count} {term}",
      "matches_found_limited": "Found {count} {term} (limited)",
      "search_error": "Error during grep search operation: {error}",
      "search_error_display": "Error: {error}",
      "ripgrep_start_failed": "Failed to start ripgrep: {error}. Please ensure @lvce-editor/ripgrep is properly installed.",
      "ripgrep_exit_error": "ripgrep exited with code {code}: {error}",
      "ripgrep_failed": "GrepLogic: ripgrep failed: {error}",
      "search_location_workspace_multiple": "across {count} workspace directories",
      "search_location_workspace_single": "in the workspace directory",
      "search_location_path": "in path \"{path}\""
    },
    "read_file": {
      "validation_error": "Error: {error}",
      "error_reading_file": "Error reading file",
      "truncated_lines_range": "Read lines {startLine}-{endLine} of {totalLines} from {filename}",
      "some_lines_shortened": " (some lines were shortened)",
      "all_lines_shortened": "Read all {totalLines} lines from {filename} (some lines were shortened)"
    },
    "write_file": {
      "validation_error": "Error: {error}",
      "file_check_error": "Error checking existing file: {error}",
      "write_error": "Error: {error}"
    }
  },
  "auth_errors": {
    "gemini_api_key_not_found": "GEMINI_API_KEY environment variable not found. Add that to your environment and try again (no reload needed if using .env)!",
    "vertex_ai_env_vars_missing": "When using Vertex AI, you must specify either:\n‚Ä¢ GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION environment variables.\n‚Ä¢ GOOGLE_API_KEY environment variable (if using express mode).\nUpdate your environment and try again (no reload needed if using .env)!",
    "gca_project_not_set": "[Error] GOOGLE_CLOUD_PROJECT is not set.\nPlease set it using:\n  export GOOGLE_CLOUD_PROJECT=<your-project-id>\nand try again.",
    "invalid_method": "Invalid auth method selected.",
    "enforced_auth_mismatch": "Authentication is enforced to be {enforcedType}, but you are currently using {currentType}.",
    "enforced_auth_type_mismatch_env": "The configured auth type is {enforcedType}, but the current auth type is {currentType}. Please re-authenticate with the correct type."
  },
  "memory": {
    "config_not_available": "Configuration not available. Cannot show memory.",
    "loaded_files": "Loaded memory from {count} {name} file{plural}.",
    "current_content": "Current combined memory content:\n```markdown\n{content}\n```",
    "loaded_but_empty": "Hierarchical memory (GEMINI.md or other context files) is loaded but content is empty.",
    "not_loaded": "No hierarchical memory (GEMINI.md or other context files) is currently loaded."
  },
  "startup": {
    "home_directory_warning": "You are running Auditaria CLI in your home directory. It is recommended to run in a project-specific directory.",
    "root_directory_warning": "Warning: You are running Auditaria CLI in the root directory. Your entire folder structure will be used for context. It is strongly recommended to run in a project-specific directory.",
    "directory_verification_error": "Could not verify the current directory due to a file system error.",
    "cannot_delete_warnings_file": "Warning: Could not delete temporary warnings file.",
    "error_reading_warnings_file": "Error checking/reading warnings file: {error}"
  },
  "non_interactive": {
    "operation_cancelled": "Operation cancelled.",
    "tool_execution_error": "Error executing tool {toolName}: {error}",
    "auth_method_required": "Please set an Auth method in your {settingsPath} or specify one of the following environment variables before running: GEMINI_API_KEY, GOOGLE_GENAI_USE_VERTEXAI, GOOGLE_GENAI_USE_GCA"
  },
  "sandbox": {
    "debian_uid_gid_info": "INFO: Defaulting to use current user UID/GID for Debian/Ubuntu-based Linux.",
    "os_release_warning": "Warning: Could not read /etc/os-release to auto-detect Debian/Ubuntu for UID/GID default.",
    "cannot_build_with_seatbelt": "ERROR: cannot BUILD_SANDBOX when using macOS Seatbelt",
    "missing_seatbelt_profile": "ERROR: missing macos seatbelt profile file '{profileFile}'",
    "using_seatbelt": "using macos seatbelt (profile: {profile}) ...",
    "hopping_into_sandbox": "hopping into sandbox (command: {command}) ...",
    "cannot_build_installed_binary": "ERROR: cannot build sandbox using installed gemini binary; run `npm link ./packages/cli` under gemini-cli repo to switch to linked binary.",
    "building_sandbox": "building sandbox ...",
    "using_custom_dockerfile": "using {dockerfile} for sandbox",
    "image_missing_or_pull_failed": "ERROR: Sandbox image '{image}' is missing or could not be pulled. {remedy}",
    "mount_path_not_absolute": "ERROR: path '{path}' listed in SANDBOX_MOUNTS must be absolute",
    "mount_path_missing": "ERROR: missing mount path '{path}' listed in SANDBOX_MOUNTS",
    "stopping_proxy": "stopping proxy ...",
    "proxy_command_exited": "ERROR: proxy command '{command}' exited with code {code}, signal {signal}",
    "waiting_proxy_start": "waiting for proxy to start ...",
    "mount_info": "SANDBOX_MOUNTS: {from} -> {to} ({opts})",
    "env_info": "SANDBOX_ENV: {env}",
    "env_invalid_format": "ERROR: SANDBOX_ENV must be a comma-separated list of key=value pairs",
    "stopping_proxy_container": "stopping proxy container ...",
    "proxy_container_exited": "ERROR: proxy container command '{command}' exited with code {code}, signal {signal}",
    "process_error": "Sandbox process error: {error}",
    "process_exited": "Sandbox process exited with code: {code}, signal: {signal}",
    "failed_start_image_check": "Failed to start '{sandbox}' command for image check: {error}",
    "attempting_pull_image": "Attempting to pull image {image} using {sandbox}...",
    "failed_start_pull_command": "Failed to start '{sandbox} pull {image}' command: {error}",
    "successfully_pulled_image": "Successfully pulled image {image}.",
    "failed_pull_image": "Failed to pull image {image}. '{sandbox} pull {image}' exited with code {code}.",
    "checking_image": "Checking for sandbox image: {image}",
    "image_found_locally": "Sandbox image {image} found locally.",
    "image_not_found_locally": "Sandbox image {image} not found locally.",
    "image_available_after_pull": "Sandbox image {image} is now available after pulling.",
    "image_still_not_found": "Sandbox image {image} still not found after a pull attempt. This might indicate an issue with the image name or registry, or the pull command reported success but failed to make the image available.",
    "failed_obtain_image": "Failed to obtain sandbox image {image} after check and pull attempt."
  },
  "extension": {
    "loading": "Loading extension: {name} (version: {version})",
    "unexpected_file": "Warning: unexpected file {path} in extensions directory.",
    "missing_config": "Warning: extension directory {dir} does not contain a config file {config}.",
    "invalid_config": "Invalid extension config in {path}: missing name or version.",
    "parse_error": "Warning: error parsing extension config in {path}: {error}",
    "all_disabled": "All extensions are disabled.",
    "activated": "Activated extension: {name} (version: {version})",
    "disabled": "Disabled extension: {name}",
    "not_found": "Extension not found: {name}",
    "mcp_servers_prompt": "This extension will run the following MCP servers: ",
    "mcp_local": "local",
    "mcp_remote": "remote",
    "context_append_info": "The extension will append info to your gemini.md context",
    "continue_prompt": "Do you want to continue? (y/n): ",
    "installation_cancelled": "Installation cancelled by user."
  },
  "oauth": {
    "auth_failed": "\nFailed to authenticate with user code.",
    "retrying": "Retrying...\n",
    "visit_url": "Please visit the following URL to authorize the application:",
    "enter_code": "Enter the authorization code: ",
    "code_required": "Authorization code is required.",
    "code_received": "Received authorization code: \"{code}\"",
    "restart_cli_message": "Logging in with Google... Please restart Auditaria CLI to continue."
  },
  "oauth2": {
    "clear_credentials_failed": "Failed to clear cached credentials: {error}",
    "browser_failed": "Failed to open browser: {error}",
    "auth_timeout": "Authentication timed out after 5 minutes. The browser tab may have gotten stuck in a loading state. Please try again or use NO_BROWSER=true for manual authentication.",
    "google_oauth_error": "Google OAuth error: {error}. {description}",
    "auth_failed_user_code": "Failed to authenticate with user code.",
    "oauth_callback_not_received": "OAuth callback not received. Unexpected request: {url}",
    "oauth_state_mismatch": "OAuth state mismatch. Possible CSRF attack or browser session issue.",
    "token_exchange_failed": "Failed to exchange authorization code for tokens: {error}",
    "no_auth_code": "No authorization code received from Google OAuth. Please try authenticating again.",
    "unexpected_oauth_error": "Unexpected error during OAuth authentication: {error}",
    "oauth_server_error": "OAuth callback server error: {error}"
  },
  "app": {
    "memory_refreshing": "Refreshing hierarchical memory (GEMINI.md or other context files)...",
    "memory_refreshed_success": "Memory refreshed successfully. Loaded {chars} characters from {count} file(s).",
    "memory_refreshed_no_content": "Memory refreshed successfully. No memory content found.",
    "memory_refresh_error": "Error refreshing memory: {error}",
    "reauth_required": "reauth required",
    "quota_exceeded_pro_paid": "‚ö° You have reached your daily {model} quota limit.\n‚ö° Automatically switching from {model} to {fallback} for the remainder of this session.\n‚ö° To continue accessing the {model} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "quota_exceeded_pro_free": "‚ö° You have reached your daily {model} quota limit.\n‚ö° Automatically switching from {model} to {fallback} for the remainder of this session.\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "quota_exceeded_pro_paid_dialog": "‚ö° You have reached your daily {model} quota limit.\n‚ö° You can choose to authenticate with a paid API key or continue with the fallback model.\n‚ö° To continue accessing the {model} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "quota_exceeded_pro_free_dialog": "‚ö° You have reached your daily {model} quota limit.\n‚ö° You can choose to authenticate with a paid API key or continue with the fallback model.\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "quota_exceeded_generic_paid": "‚ö° You have reached your daily quota limit.\n‚ö° Automatically switching from {model} to {fallback} for the remainder of this session.\n‚ö° To continue accessing the {model} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "quota_exceeded_generic_free": "‚ö° You have reached your daily quota limit.\n‚ö° Automatically switching from {model} to {fallback} for the remainder of this session.\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "fallback_default_paid": "‚ö° Automatically switching from {model} to {fallback} for faster responses for the remainder of this session.\n‚ö° Possible reasons for this are that you have received multiple consecutive capacity errors or you have reached your daily {model} quota limit\n‚ö° To continue accessing the {model} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "fallback_default_free": "‚ö° Automatically switching from {model} to {fallback} for faster responses for the remainder of this session.\n‚ö° Possible reasons for this are that you have received multiple consecutive capacity errors or you have reached your daily {model} quota limit\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "switched_to_fallback_tip": "Switched to fallback model. Tip: Press Ctrl+P to recall your previous prompt and submit it again if you wish.",
    "auth_timeout": "Authentication timed out. Please try again.",
    "press_ctrl_c_exit": "Press Ctrl+C again to exit.",
    "press_ctrl_d_exit": "Press Ctrl+D again to exit.",
    "initialization_error": "Initialization Error: {error}",
    "check_api_config": "Please check API key and configuration.",
    "ide_trust_changed": "Workspace trust has changed. Press 'r' to restart Auditaria to apply the changes."
  },
  "cli": {
    "errors": {
      "prompt_interactive_conflict": "Cannot use both --prompt (-p) and --prompt-interactive (-i) together",
      "prompt_interactive_stdin": "Error: The --prompt-interactive flag cannot be used when input is piped from stdin.",
      "yolo_approval_conflict": "Cannot use both --yolo (-y) and --approval-mode together. Use --approval-mode=yolo instead.",
      "invalid_approval_mode": "Invalid approval mode: {mode}. Valid values are: yolo, auto_edit, default",
      "prompt_positional_conflict": "Cannot use both a positional prompt and the --prompt (-p) flag together"
    },
    "options": {
      "session_summary": "File to write session summary to."
    }
  },
  "dns": {
    "invalid_resolution_order": "Invalid value for dnsResolutionOrder in settings: \"{order}\". Using default \"{defaultValue}\"."
  },
  "loop_detection": {
    "message": "A potential loop was detected. This can happen due to repetitive tool calls or other model behavior. The request has been halted.",
    "disabled": "Loop detection has been disabled for this session. Please try your request again.",
    "confirmation": {
      "title": "A potential loop was detected",
      "description": "This can happen due to repetitive tool calls or other model behavior. Do you want to keep loop detection enabled or disable it for this session?",
      "aria_label": "Loop detected:",
      "options": {
        "keep": "Keep loop detection enabled (esc)",
        "disable": "Disable loop detection for this session"
      }
    }
  },
  "warnings": {
    "ide_server_reserved": "Ignoring user-defined MCP server config for \"{serverName}\" as it is a reserved name."
  },
  "citations": {
    "title": "Citations:"
  },
  "finish_reasons": {
    "max_tokens": "Response truncated due to token limits.",
    "safety": "Response stopped due to safety reasons.",
    "recitation": "Response stopped due to recitation policy.",
    "language": "Response stopped due to unsupported language.",
    "blocklist": "Response stopped due to forbidden terms.",
    "prohibited_content": "Response stopped due to prohibited content.",
    "spii": "Response stopped due to sensitive personally identifiable information.",
    "other": "Response stopped for other reasons.",
    "malformed_function_call": "Response stopped due to malformed function call.",
    "image_safety": "Response stopped due to image safety violations.",
    "unexpected_tool_call": "Response stopped due to unexpected tool call."
  },
  "ide": {
    "errors": {
      "extension_not_found": "Gemini CLI Companion extension not found. Install via /ide install and restart the CLI in a fresh terminal window.",
      "single_workspace_required": "To use this feature, please open a workspace folder in {ide} and try again.",
      "directory_mismatch": "Directory mismatch. Gemini CLI is running in a different location than the open workspace in {ide}. Please run the CLI from the same directory as your project's root folder.",
      "directory_mismatch_multi": "Directory mismatch. Gemini CLI is running in a different location than the open workspace in {ide}. Please run the CLI from one of the following directories: {directories}",
      "client_error": "Client error.",
      "connection_closed": "IDE connection closed. To reconnect, run /ide enable.",
      "connection_failed": "Failed to connect to IDE server: {error}",
      "not_supported": "IDE integration is not supported in your current environment. To use this feature, run Gemini CLI in one of these supported IDEs: {supportedIDEs}",
      "integration_disabled": "IDE integration is currently disabled. To enable it, run /ide enable.",
      "integration_disabled_reenable": "IDE integration disabled. To enable it again, run /ide enable.",
      "extension_connection_failed": "Failed to connect to IDE companion extension in {ide}. Please ensure the extension is running. To install the extension, run /ide install.",
      "connection_lost": "IDE connection error. The connection was lost unexpectedly. Please try reconnecting by running /ide enable"
    },
    "process_utils": {
      "shell_not_found": "Failed to find shell process in the process tree. Falling back to top-level process, which may be inaccurate. If you see this, please file a bug via /bug."
    }
  },
  "vscode_extension": {
    "command_title": "Auditaria CLI: Run",
    "terminal_name": "Auditaria CLI"
  },
  "checkpoint": {
    "tag_sanitized_empty": "Sanitized tag is empty setting to \"default\"."
  },
  "ide_context": {
    "title": "Context (ctrl+g to toggle)",
    "open_files": "Open files:",
    "active_file": " (active)",
    "open_files_count": "{count} open file{plural} (ctrl+g to view)",
    "file_list_note": "\n(Note: The file list is limited to a number of recently accessed files within your workspace and only includes local files on disk)"
  },
  "ide_integration_nudge": {
    "question": "Do you want to connect {ideName} editor to Auditaria CLI?",
    "description": "If you select Yes, we'll install an extension that allows the CLI to access your open files and display diffs directly in {ideName}.",
    "description_installed": "If you select Yes, the CLI will have access to your open files and display diffs directly in {ideName}.",
    "yes": "Yes",
    "no_esc": "No (esc)",
    "no_dont_ask": "No, don't ask again"
  },
  "folder_trust_dialog": {
    "title": "Do you trust this folder?",
    "description": "Trusting a folder allows Auditaria to execute commands it suggests. This is a security feature to prevent accidental execution in untrusted directories.",
    "options": {
      "trust_folder": "Trust folder ({dirName})",
      "trust_parent": "Trust parent folder ({parentFolder})",
      "dont_trust": "Don't trust (esc)"
    }
  },
  "settings": {
    "tools": {
      "truncate_output_threshold": {
        "label": "Tool Output Truncation Threshold",
        "description": "Truncate tool output if it is larger than this many characters. Set to -1 to disable."
      },
      "truncate_output_lines": {
        "label": "Tool Output Truncation Lines",
        "description": "The number of lines to keep when truncating tool output."
      }
    },
    "chatCompression": {
      "invalid_threshold": "Invalid value for chatCompression.contextPercentageThreshold: \"{threshold}\". Please use a value between 0 and 1. Using default compression settings."
    }
  },
  "utils": {
    "unknown_platform_url_open": "Unknown platform: {platform}. Attempting to open URLs with: {openCmd}."
  },
  "ide_installer": {
    "vscode_cli_not_found": "VS Code CLI not found. Please ensure 'code' is in your system's PATH. For help, see https://code.visualstudio.com/docs/configure/command-line#_code-is-not-recognized-as-an-internal-or-external-command. You can also install the 'Gemini CLI Companion' extension manually from the VS Code marketplace.",
    "companion_not_found": "Could not find the required VS Code companion extension. Please file a bug via /bug.",
    "vscode_install_success": "VS Code companion extension was installed successfully. Please restart your terminal to complete the setup.",
    "vscode_install_failed": "Failed to install VS Code companion extension. Please try installing 'Gemini CLI Companion' manually from the VS Code extension marketplace.",
    "openvsx_install_success": "VS Code companion extension was installed successfully from OpenVSX. Please restart your terminal to complete the setup.",
    "openvsx_install_failed": "Failed to install VS Code companion extension from OpenVSX. Please try installing it manually."
  },
  "general": {
    "operation_cancelled": "Operation cancelled."
  },
  "screen_reader": {
    "user_prefix": "User: ",
    "model_prefix": "Model: ",
    "loading": "loading",
    "responding": "responding"
  },
  "gemini_stream": {
    "request_cancelled": "Request cancelled."
  },
  "trusted_folders": {
    "error_saving": "Error saving trusted folders file: {error}",
    "error_loading": "Error loading trusted folders config from {path}: {message}",
    "cannot_enable_privileged_modes": "Cannot enable privileged approval modes in an untrusted folder.",
    "approval_mode_overridden": "Approval mode overridden to \"default\" because the current folder is not trusted."
  },
  "telemetry": {
    "data_collection_disabled": "Data collection is disabled."
  },
  "stdin": {
    "truncated_warning": "Warning: stdin input truncated to {size} bytes.",
    "no_input_error": "No input provided via stdin. Input can be provided by piping data into auditaria or using the --prompt option."
  },
  "message_queue": {
    "more_messages": "... (+{count} more)"
  },
  "web": {
    "cli_action": {
      "title": "CLI Action Required",
      "auth_in_progress": "Authentication is in progress. Please check the CLI terminal.",
      "auth_required": "Authentication is required. Please complete the authentication process in the CLI terminal.",
      "theme_selection": "Theme selection is open. Please choose a theme in the CLI terminal.",
      "editor_settings": "Editor settings are open. Please configure your editor in the CLI terminal.",
      "language_selection": "Language selection is open. Please choose a language in the CLI terminal.",
      "settings": "Settings dialog is open. Please configure your settings in the CLI terminal.",
      "privacy_notice": "Privacy notice is displayed. Please review it in the CLI terminal.",
      "ide_integration": "IDE integration prompt is displayed. Please respond to connect your editor to Auditaria CLI in the terminal.",
      "pro_quota_dialog": "Pro quota limit reached. Please choose whether to change authentication or continue with the fallback model in the CLI terminal.",
      "loop_detection": "Loop detection confirmation required. Please choose whether to keep or disable loop detection in the CLI terminal."
    }
  },
  "workspace_migration": {
    "deprecated": "Workspace-level extensions are deprecated",
    "prompt": "Would you like to install them at the user level?",
    "definition_note": "The extension definition will remain in your workspace directory.",
    "skip_note": "If you opt to skip, you can install them manually using the extensions install command.",
    "install_all": "Install all",
    "skip": "Skip",
    "failed_with_errors": "The following extensions failed to migrate. Please try installing them manually. To see other changes, Auditaria CLI must be restarted. Press 'q' to quit.",
    "complete": "Migration complete. To see changes, Auditaria CLI must be restarted. Press 'q' to quit."
  },
  "pathReader": {
    "errors": {
      "absolutePathOutside": "Absolute path is outside of the allowed workspace: {path}",
      "pathNotFound": "Path not found in workspace: {path}"
    }
  },
  "atFile": {
    "fileIgnored": "File '@{{path}}' was ignored by .gitignore or .geminiignore and was not included in the prompt.",
    "failedToInject": "Failed to inject content for '@{{path}}': {error}"
  },
  "pro_quota_dialog": {
    "title": "Pro quota limit reached for {model}.",
    "change_auth": "Change auth (executes the /auth command)",
    "continue_with_model": "Continue with {model}"
  },
  "quota": {
    "pro_exceeded_paid": "‚ö° You have reached your daily {model} quota limit.\n‚ö° You can choose to authenticate with a paid API key or continue with the fallback model.\n‚ö° To continue accessing the {model} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "pro_exceeded_free": "‚ö° You have reached your daily {model} quota limit.\n‚ö° You can choose to authenticate with a paid API key or continue with the fallback model.\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "generic_exceeded_paid": "‚ö° You have reached your daily quota limit.\n‚ö° Automatically switching from {failedModel} to {fallbackModel} for the remainder of this session.\n‚ö° To continue accessing the {failedModel} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "generic_exceeded_free": "‚ö° You have reached your daily quota limit.\n‚ö° Automatically switching from {failedModel} to {fallbackModel} for the remainder of this session.\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "fallback_paid": "‚ö° Automatically switching from {failedModel} to {fallbackModel} for faster responses for the remainder of this session.\n‚ö° Possible reasons for this are that you have received multiple consecutive capacity errors or you have reached your daily {failedModel} quota limit\n‚ö° To continue accessing the {failedModel} model today, consider using /auth to switch to using a paid API key from AI Studio at https://aistudio.google.com/apikey",
    "fallback_free": "‚ö° Automatically switching from {failedModel} to {fallbackModel} for faster responses for the remainder of this session.\n‚ö° Possible reasons for this are that you have received multiple consecutive capacity errors or you have reached your daily {failedModel} quota limit\n‚ö° To increase your limits, upgrade to a Gemini Code Assist Standard or Enterprise plan with higher limits at https://goo.gle/set-up-gemini-code-assist\n‚ö° Or you can utilize a Gemini API Key. See: https://goo.gle/gemini-cli-docs-auth#gemini-api-key\n‚ö° You can switch authentication methods by typing /auth",
    "switched_to_fallback": "Switched to fallback model. Tip: Press Ctrl+P (or Up Arrow) to recall your previous prompt and submit it again if you wish."
  },
  "ui": {
    "initialization": {
      "initializing": "Initializing...",
      "connecting_mcp_servers": "Connecting to MCP servers... ({connected}/{total})"
    }
  },
  "system": {
    "memory": {
      "high_usage_warning": "High memory usage detected: {usage} GB. If you experience a crash, please file a bug report by running `/bug`"
    }
  }
}
